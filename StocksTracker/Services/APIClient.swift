import Foundation

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
class APIClient {
    static let shared = APIClient()  // –û–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    
    private let baseURL = "https://finnhub.io/api/v1/quote"  // –ë–∞–∑–æ–≤—ã–π URL Finhub API
    private let apiKey = "d1v64upr01qj71gjmmu0d1v64upr01qj71gjmmug"
    
    // –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ –∞–∫—Ü–∏–∏
    func fetchStockPrice(for symbol: String, completion: @escaping (Result<Stock, Error>) -> Void) {
        let urlString = "\(baseURL)?symbol=\(symbol)&token=\(apiKey)"
        guard let url = URL(string: urlString) else {
            completion(.failure(NSError(domain: "", code: 0, userInfo: [NSLocalizedDescriptionKey: "Invalid URL"])))
            return
        }

        print("üîó –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ URL: \(urlString)")

        let task = URLSession.shared.dataTask(with: url) { data, _, error in
            if let error = error {
                completion(.failure(error))
                return
            }

            guard let data = data else {
                completion(.failure(NSError(domain: "", code: 0, userInfo: [NSLocalizedDescriptionKey: "No Data"])))
                return
            }

            do {
                let response = try JSONDecoder().decode(StockResponse.self, from: data)

                // –¢—É—Ç –º—ã —Å–æ–∑–¥–∞—ë–º —Å–≤–æ—é –º–æ–¥–µ–ª—å —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏
                let stock = Stock(
                    symbol: symbol.uppercased(),
                    name: "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
                    price: response.c,
                    c: response.c,
                    h: response.h,
                    l: response.l,
                    o: response.o,
                    pc: response.pc,
                    t: response.t
                )

                completion(.success(stock))
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏: \(error)")
                completion(.failure(error))
            }
        }

        task.resume()
    }

}

